{"version":3,"sources":["assets/logo.png","components/Header.js","components/Maps.js","App.js","reportWebVitals.js","index.js","components/mystyle.module.css"],"names":["Header","className","src","mainLogo","alt","require","config","MapButton","text","styles","table","Maps","state","showingInfoWindow","activeMarker","selectedPlace","showBlueMarkers","showRedMarkers","onMarkerClick","props","marker","e","setState","onClose","coords","i","isLive","this","position","lat","latitude","lng","longitude","onClick","name","fromDateTime","toDateTime","faultLocation","locationDetails","animation","icon","type","google","zoom","initialCenter","JSON","parse","markerLocation","map","object","displayMarkers","visible","button","buttonClicked","bind","Component","GoogleApiWrapper","apiKey","process","App","apiResponse","fetch","then","res","callAPI","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.cdd7a0b8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.5bc4497a.png\";","import React from 'react'\r\nimport mainLogo from '../assets/logo.png';\r\nimport './Header.css'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <nav>\r\n            <div className='div-header'>\r\n                <div className='div-logo'>\r\n                    <img src={mainLogo} alt='logo' />\r\n                </div>\r\n                <div className='div-name'>\r\n                    <h1>Live and planned power outages.</h1>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\nexport default Header","import React, { Component } from 'react'\r\nimport { Map, GoogleApiWrapper, Marker, InfoWindow } from 'google-maps-react';\r\nimport styles from './mystyle.module.css';\r\nrequire('dotenv').config()\r\n\r\nconst MapButton = ({ text }) => (\r\n    <div className={styles.table}>\r\n        {text}\r\n    </div>\r\n);\r\n\r\nclass Maps extends Component {\r\n\r\n    state = {\r\n        showingInfoWindow: false,  // Hides or shows the InfoWindow\r\n        activeMarker: {},          // Shows the active marker upon click\r\n        selectedPlace: {},          // Shows the InfoWindow to the selected place upon a marker\r\n        showBlueMarkers: true,\r\n        showRedMarkers: true\r\n    };\r\n\r\n    onMarkerClick = (props, marker, e) =>\r\n        this.setState({\r\n            selectedPlace: props,\r\n            activeMarker: marker,\r\n            showingInfoWindow: true\r\n        });\r\n\r\n    onClose = props => {\r\n        if (this.state.showingInfoWindow) {\r\n            this.setState({\r\n                showingInfoWindow: false,\r\n                activeMarker: null\r\n            });\r\n        }\r\n    };\r\n\r\n    displayMarkers(coords, i) {\r\n        if (coords.isLive && this.state.showRedMarkers) {\r\n            return <Marker\r\n                key={i}\r\n                position={{\r\n                    lat: coords.latitude,\r\n                    lng: coords.longitude,\r\n                }}\r\n                onClick={this.onMarkerClick}\r\n                name={\r\n                    <div>\r\n                        <p>From: {coords.fromDateTime}</p>\r\n                        <p>To: {coords.toDateTime}</p>\r\n                        <p>Location: {coords.faultLocation}</p>\r\n                        <p>Details: {coords.locationDetails}</p>\r\n                    </div>\r\n                }\r\n                animation={2}\r\n            />\r\n        }\r\n        else if (!coords.isLive && this.state.showBlueMarkers) {\r\n            return <Marker\r\n                key={i}\r\n                position={{\r\n                    lat: coords.latitude,\r\n                    lng: coords.longitude,\r\n                }}\r\n                onClick={this.onMarkerClick}\r\n                name={\r\n                    <div>\r\n                        <p>From: {coords.fromDateTime}</p>\r\n                        <p>To: {coords.toDateTime}</p>\r\n                        <p>Location: {coords.faultLocation}</p>\r\n                        <p>Details: {coords.locationDetails}</p>\r\n                    </div>}\r\n                icon={'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'}\r\n                animation={2}\r\n            />\r\n        }\r\n    }\r\n\r\n    buttonClicked(type) {\r\n        if (type === 'red' && this.state.showBlueMarkers) {\r\n            this.setState({ showBlueMarkers: false })\r\n            this.setState({ showRedMarkers: true })\r\n        }\r\n        else if (type === 'blue' && this.state.showRedMarkers) {\r\n            this.setState({ showBlueMarkers: true })\r\n            this.setState({ showRedMarkers: false })\r\n        }\r\n        else if (type === 'all' && (!this.state.showBlueMarkers || !this.state.showRedMarkers)) {\r\n            this.setState({ showBlueMarkers: true })\r\n            this.setState({ showRedMarkers: true })\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Map\r\n                google={this.props.google}\r\n                zoom={6.7}\r\n                initialCenter={{ lat: 38, lng: 24.2 }}\r\n            >\r\n                {JSON.parse(this.props.markerLocation).map((object, i) => this.displayMarkers(object, i))}\r\n\r\n                <InfoWindow\r\n                    marker={this.state.activeMarker}\r\n                    visible={this.state.showingInfoWindow}\r\n                    onClose={this.onClose}\r\n                >\r\n                    <div>\r\n                        <h4>{this.state.selectedPlace.name}</h4>\r\n                    </div>\r\n                </InfoWindow>\r\n\r\n                <MapButton\r\n                    text={\r\n                        <button\r\n                            className={styles.button}\r\n                            onClick={this.buttonClicked.bind(this, 'red')}>\r\n                            <img src='https://maps.gstatic.com/mapfiles/ms2/micons/red-dot.png' alt=''></img>\r\n                            <p>Live</p>\r\n                        </button>\r\n                    }\r\n                />\r\n\r\n                <MapButton\r\n                    text={\r\n                        <button\r\n                            className={styles.button}\r\n                            onClick={this.buttonClicked.bind(this, 'blue')}>\r\n                            <img src='http://maps.google.com/mapfiles/ms/icons/blue-dot.png' alt=''></img>\r\n                            <p>Planned</p>\r\n                        </button>\r\n                    }\r\n                />\r\n\r\n                <MapButton\r\n                    text={\r\n                        <button\r\n                            className={styles.button}\r\n                            onClick={this.buttonClicked.bind(this, 'all')}>\r\n                            <img src='http://maps.google.com/mapfiles/kml/pal4/icon57.png' alt=''></img>\r\n                            <p>All</p>\r\n                        </button>\r\n                    }\r\n                />\r\n\r\n            </Map>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n    apiKey: process.env.REACT_APP_GOOGLE_API_KEY\r\n})(Maps);","import React, { Component } from 'react'\nimport './App.css';\nimport Header from './components/Header';\nimport Maps from './components/Maps';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { apiResponse: '' };\n  }\n\n  callAPI() {\n      //fetch('http://localhost:9000/locationsAPI')\n      fetch('https://hedno-map-api.herokuapp.com/locationsAPI')\n      .then(res => res.text())\n      .then(res => this.setState({ apiResponse: res }));\n  }\n\n  componentDidMount() {\n    this.callAPI();\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <Header />\n        <Maps markerLocation={this.state.apiResponse} />\n      </div>\n    );\n  }\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<React.StrictMode><App /></React.StrictMode>,document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"mystyle_button__ZLcWu\",\"table\":\"mystyle_table__5qKUZ\"};"],"sourceRoot":""}